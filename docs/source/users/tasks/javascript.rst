Javascript Tasks
================

You can run arbitrary javascript code in your experiments. In essence, you provide a html page, 
which the system will render in an iframe. 
The data generated by your task needs to be separated into different categories:
- Result data, i.e. the data that you want to include in your results. 
- Larger files that need to be added to the result, but will be stored separately.
- Persistent data that is can be made available to other tasks as well
- Output data that can be used by e.g. filters or other processes within a study

SOILE functionality offered to the task
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SOILE will add the following functions and variables to the window the task is running in:

- window.persistentData : This is a JSON object that contains all persistent data elements the user has processed until now.
                          If your task makes use of this type of data or requires it, ensure that 
                          this is well documented in code and READMEs, as variables names in persistent
                          data are not namespaced, and can thus be overwritten by any other task
                          that uses the same variable names. 
- window.setPersistent(key : str, value : Any) : With this function, you can set persistent data.
                          While the value is of type any it needs to be a value that is convertible into
                          a JSON object. 
- window.submitFile(fileName : str, fileFormat : str, file : File) : This function adds a file to the 
                          Results of the task. It starts an upload of the file and the submission process
                          will not finish while there are still files being uploaded. 
- window.reportResult( currentData : dict): This function will add the data in currentData to the results data of 
                          the task. 
- window.submitResults() : This function initiates the task submission. It should only ever be called once, 
                          so please ensure, that you do not allow repeated pressing of a submission button.
- window.handleError(error) : This function allows propagation of error messages to the SOILE system, 
                          which will then be displayed;
- window.setOutput(key :str, value : number) : Set a output (value useable in SOILE study parts like filters). Outputs
                          MUST be numbers, and non numbers will result in errors.

How to access Persistent Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

